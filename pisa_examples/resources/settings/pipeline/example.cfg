#include settings/binning/example.cfg as binning
#include settings/osc/nufitv20.cfg as osc
#include settings/osc/earth.cfg as earth

# These first few lines import other config files that will be useful here...


#------------------------------------------------------------------------------
# Settings directly affecting or handled by the pipeline
#------------------------------------------------------------------------------

[pipeline]

# Define order of stages to be executed one after another, and specify the
# service to use for each of them as stage1:serviceA, stage2:serviceB, ...
order = data.simple_data_loader, flux.pi_barr_simple, osc.pi_prob3, aeff.pi_aeff, utils.pi_hist

# Select the params denoted by param.<param_selector>.<param_name>
# This feature allows a whole subset of parameters to be selected,
# in this case normal hierarchy values for oscillation parameters
param_selections = nh


#------------------------------------------------------------------------------
# 'data' stage parameters
#------------------------------------------------------------------------------

# This stage is used to load events
# The events used here are toy events, stored as HDF5 files

[data.simple_data_loader]

# 'specs' tell the stages what format the data should be in, normally events or
# histograms (which are specified via a binning definition). PISA pi is designed
# such that stages should be able to accept either binned or event-wise data and
# perform either binned or event-wise calculations, although some stages may
# only support specific configurations.
# The particular options to each stage are:
#   1) input_specs  : the format the stage expects the input data to be in
#   2) calc_specs   : rarely used, but can specify a particular different format for the calculation
#                     to be performed in (for example compute oscillation probabilities on a grid and
#                     look them up for event-wise calculation)
#   3) output_specs : the format the stage should output data in

input_specs = events
calc_specs = None
output_specs = events

# Define the categories of events to be produced by this pipeline
# Here we use distinct categories for each flavor, particle vs antiparticle,
# and CC vs NC interaction
output_names = nue_cc, numu_cc, nutau_cc, nuebar_cc, numubar_cc, nutaubar_cc, nue_nc, numu_nc, nutau_nc, nuebar_nc, numubar_nc, nutaubar_nc

# The file containing the input events
events_file = events/events__vlvnt__toy_1_to_80GeV_spidx1.0_cz-1_to_1_1e2evts_set0__unjoined__with_fluxes_honda-2015-spl-solmin-aa.hdf5

# Any cuts that should be applied to the events
mc_cuts = (pid >= -3)

# Map input file variables to PISA event variables
data_dict = {
    'true_energy': 'true_energy',
    'true_coszen': 'true_coszen',
    'reco_energy': 'reco_energy',
    'reco_coszen': 'reco_coszen',
    'pid': 'pid',
    'weighted_aeff': 'weighted_aeff',
    'nu_flux_nominal': ['nominal_nue_flux', 'nominal_numu_flux'],
    'nubar_flux_nominal': ['nominal_nuebar_flux', 'nominal_numubar_flux']
    }


#------------------------------------------------------------------------------
# 'flux' stage parameters
#------------------------------------------------------------------------------

# This stage computes weight modifications for events according
# to the flux systematics.
# Right now the implementation is a parameterisation of the
# Barr 2006 paper, plus handling for the spectral index.

[flux.pi_barr_simple]

input_specs = events
calc_specs = events
output_specs = events

# nu/nubar ratio
param.nu_nubar_ratio = 1.0 +/- 0.1
param.nu_nubar_ratio.fixed = True
param.nu_nubar_ratio.range = nominal + [-3., +3.] * sigma

# nu_e/nu_mu ratio
param.nue_numu_ratio = 1.0 +/- 0.05
param.nue_numu_ratio.fixed = True
param.nue_numu_ratio.range = nominal + [-0.5, +0.5]

# Barr flux up/horizontal
param.Barr_uphor_ratio = 0.0 +/- 1.0
param.Barr_uphor_ratio.fixed = True
param.Barr_uphor_ratio.range = nominal + [-3.0, +3.0]

# Barr flux nu/nubar
param.Barr_nu_nubar_ratio = 0.0 +/- 1.0
param.Barr_nu_nubar_ratio.fixed = True
param.Barr_nu_nubar_ratio.range = nominal + [-3.0, +3.0]

# Spectral index
param.delta_index = 0.0 +/- 0.1
param.delta_index.fixed = False
param.delta_index.range = nominal + [-5, +5] * sigma


#------------------------------------------------------------------------------
# 'oscillation' stage parameters
#------------------------------------------------------------------------------

# The oscillations stage uses prob3 to calculate oscillation probabilities
# for the events according to the values of the mass splitting, mixing angles,
# etc provided.
# Note that the oscillation probabilities here are computed on a grid and assigned
# to the individual events (it is also possible just to compute exactly for
# each event, but this might be slower depending on sample size)

[osc.pi_prob3]

# Here our input and output will be events, but we perform the oscillation
# probability calculation on a grid for speed
input_specs = events
calc_specs = calc_grid
output_specs = events

# Preliminary Reference Earth Model
param.earth_model = osc/PREM_12layer.dat

# electron densities
param.YeI = ${earth:YeI}
param.YeM = ${earth:YeM}
param.YeO = ${earth:YeO}

# depth of detector below Earth surface and
# neutrino production height in the atmosphere
# (e.g., for vertically downgoing,
# baseline = depth + height)
param.detector_depth = ${earth:detector_depth}
param.prop_height = ${earth:prop_height}

# solar angle
param.theta12 = ${osc:theta12}
param.theta12.fixed = True

# reactor angle
param.nh.theta13 = ${osc:theta13_nh}
param.nh.theta13.fixed = True
param.nh.theta13.range = ${osc:theta13_nh.range}

param.ih.theta13 = ${osc:theta13_ih}
param.ih.theta13.fixed = True
param.ih.theta13.range = ${osc:theta13_ih.range}

# atmospheric angle
param.nh.theta23 = ${osc:theta23_nh}
param.nh.theta23.fixed = False
param.nh.theta23.range = [0, 90] * units.degree
param.nh.theta23.prior = uniform

param.ih.theta23 = ${osc:theta23_ih}
param.ih.theta23.fixed = False
param.ih.theta23.range = [0, 90] * units.degree
param.ih.theta23.prior = uniform

# dirac phase
param.nh.deltacp = 0.0 * units.deg
param.nh.deltacp.fixed = True
param.nh.deltacp.range = ${osc:deltacp_nh.range}
param.nh.deltacp.prior = uniform

param.ih.deltacp = 0.0 * units.deg
param.ih.deltacp.fixed = True
param.ih.deltacp.range = ${osc:deltacp_ih.range}
param.ih.deltacp.prior = uniform

# solar mass splitting
param.deltam21 = ${osc:deltam21}
param.deltam21.fixed = True

# atmospheric mass splitting
param.nh.deltam31 = ${osc:deltam31_nh}
param.nh.deltam31.fixed = True
param.nh.deltam31.prior = uniform
param.nh.deltam31.range = [0.001, +0.007] * units.eV**2

param.ih.deltam31 = ${osc:deltam31_ih}
param.ih.deltam31.fixed = True
param.ih.deltam31.prior = uniform
param.ih.deltam31.range = [-0.007, -0.001] * units.eV**2


#------------------------------------------------------------------------------
# 'effective area' stage parameters
#------------------------------------------------------------------------------

# This stage is responsible for handling a host of normalisations of the
# events/histograms (the stage name is a bit misleading)
# We provide the livetime for our data (or template which matches it)
# The parameter aeff_scale is the overall normalisation for all events,
# and should be free in a shape-only analysis

[aeff.pi_aeff]

input_specs = events
output_specs = events

# Detector livetime this template should be weighted to represent
param.livetime = 2.5 * units.common_year

# Overall normalisation of this pipeline
param.aeff_scale = 1.0
param.aeff_scale.fixed = False
param.aeff_scale.prior = uniform
param.aeff_scale.range = [0.,3.] * units.dimensionless

# CC tau neutrino norm
param.nutau_cc_norm = 1.0
param.nutau_cc_norm.fixed = True
param.nutau_cc_norm.range = [0.2, 2.0] * units.dimensionless
param.nutau_cc_norm.prior = uniform

# CC+NC nutau norm
param.nutau_norm = 1.0
param.nutau_norm.fixed = True
param.nutau_norm.range = [-1.0, 8.5] * units.dimensionless
param.nutau_norm.prior = uniform

# NC norm
param.nu_nc_norm = 1.0 +/- 0.2
param.nu_nc_norm.fixed = True
param.nu_nc_norm.range = nominal + [-.5,+.5]


#------------------------------------------------------------------------------
# 'histogramming' stage parameters
#------------------------------------------------------------------------------

# This just creates histograms (maps in PISA jargon) from the events

[utils.pi_hist]

input_specs = events

# Here we define the binning we will use for our output histogram
# This is the same binning as would be used for real data, and hence must only
# use reconstructed variables (no truth information).
# The binning definitions can be found in a  separate 'example_binning.cfg' file,
# which is imported by the first line of this file.
output_specs = reco_binning

# Specify if and how to assign uncertainties to the output maps,
# here sum of weights-squared
error_method = sumw2
